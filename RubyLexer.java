/* The following code was generated by JFlex 1.4.3 on 21/06/2023, 12:31 pm */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 21/06/2023, 12:31 pm from the specification file
 * <tt>RubyScanner.flex</tt>
 */
public class RubyLexer {
  public boolean yyatEOF() {return zzAtEOF;}
  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\12\1\71"+
    "\1\4\1\22\1\12\1\16\1\0\1\72\1\73\1\11\1\10\1\101"+
    "\1\10\1\7\1\12\1\23\1\31\2\30\4\32\2\24\1\103\1\102"+
    "\1\14\1\13\1\15\1\21\1\100\1\27\1\36\1\27\1\56\1\37"+
    "\1\33\1\40\1\5\1\41\1\105\1\5\1\25\1\5\1\42\11\5"+
    "\1\26\2\5\1\76\1\35\1\77\1\12\1\6\1\104\1\47\1\64"+
    "\1\63\1\61\1\34\1\53\1\70\1\55\1\51\1\105\1\65\1\52"+
    "\1\66\1\43\1\57\1\60\1\5\1\46\1\44\1\50\1\45\1\5"+
    "\1\54\1\67\1\62\1\5\1\74\1\17\1\75\1\20\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\4\2\1\3\1\1\10\4\1\5\2\6"+
    "\22\3\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\2\24\1\1"+
    "\1\25\1\26\1\0\4\6\1\0\3\6\1\0\20\3"+
    "\1\27\1\30\12\3\1\23\2\24\2\0\3\6\1\0"+
    "\1\6\1\3\1\31\20\3\1\30\6\3\2\0\2\6"+
    "\15\3\1\0\2\6\1\3\1\0\2\6\1\0\2\6"+
    "\1\32\6\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\5\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\214\0\u0118\0\u015e\0\u01a4"+
    "\0\u01ea\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4"+
    "\0\214\0\214\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578"+
    "\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8"+
    "\0\u07ee\0\u0834\0\u087a\0\u08c0\0\u0906\0\u094c\0\214\0\214"+
    "\0\214\0\214\0\214\0\214\0\214\0\214\0\214\0\214"+
    "\0\214\0\214\0\u0992\0\u09d8\0\214\0\u0a1e\0\214\0\214"+
    "\0\u0a64\0\u0aaa\0\u0af0\0\u0b36\0\214\0\u0b7c\0\u0bc2\0\u0c08"+
    "\0\u0c4e\0\u0c94\0\u0cda\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\u0e38"+
    "\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068"+
    "\0\u10ae\0\u10f4\0\u01a4\0\u01a4\0\u113a\0\u1180\0\u11c6\0\u120c"+
    "\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0\0\214\0\u13f6"+
    "\0\u143c\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a\0\u15e0\0\u1626"+
    "\0\u166c\0\u01a4\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810"+
    "\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa\0\u1a40"+
    "\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70"+
    "\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0"+
    "\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u20d0"+
    "\0\u2116\0\u215c\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u2300"+
    "\0\u2346\0\u238c\0\u23d2\0\u2418\0\214\0\u245e\0\u24a4\0\u24ea"+
    "\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a"+
    "\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u2878\0\u28be\0\u2904\0\u294a"+
    "\0\u2990\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee\0\u2b34";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\2\13\1\15\1\16\1\17\1\20\2\21"+
    "\1\22\1\23\1\24\3\10\3\24\1\10\1\25\1\3"+
    "\1\26\1\27\3\10\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\10\1\37\1\40\2\10\1\41\1\10"+
    "\1\42\1\43\1\44\1\45\1\10\1\46\2\10\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\10\1\63\1\64\1\65\32\63"+
    "\1\66\33\63\1\67\14\63\110\0\1\5\106\0\1\6"+
    "\102\0\1\7\1\4\1\5\103\7\5\0\2\10\12\0"+
    "\1\70\1\0\12\10\1\0\33\10\14\0\1\10\6\0"+
    "\1\71\122\0\2\72\3\0\3\72\66\0\1\21\103\0"+
    "\1\13\1\0\1\21\105\0\1\21\1\13\104\0\1\21"+
    "\1\0\1\13\103\0\1\21\2\0\1\13\102\0\1\21"+
    "\3\0\1\13\75\0\1\72\13\0\1\73\1\74\1\75"+
    "\1\76\1\0\1\77\1\100\1\77\1\101\1\102\2\0"+
    "\1\102\12\0\1\75\1\101\13\0\1\76\25\0\1\72"+
    "\13\0\2\24\1\75\2\0\3\24\1\101\1\102\2\0"+
    "\1\102\12\0\1\75\1\101\37\0\2\10\12\0\1\70"+
    "\1\0\12\10\1\0\5\10\1\103\6\10\1\104\16\10"+
    "\14\0\1\10\5\0\2\10\12\0\1\70\1\0\12\10"+
    "\1\0\1\10\1\105\31\10\14\0\1\10\5\0\2\10"+
    "\12\0\1\70\1\0\12\10\1\0\4\10\1\106\26\10"+
    "\14\0\1\10\5\0\2\10\12\0\1\70\1\0\11\10"+
    "\1\107\1\0\13\10\1\110\5\10\1\111\11\10\14\0"+
    "\1\10\5\0\2\10\12\0\1\70\1\0\11\10\1\112"+
    "\1\0\7\10\1\113\23\10\14\0\1\10\5\0\2\10"+
    "\12\0\1\70\1\0\12\10\1\0\5\10\1\114\25\10"+
    "\14\0\1\10\5\0\2\10\12\0\1\70\1\0\11\10"+
    "\1\115\1\0\33\10\14\0\1\10\5\0\2\10\12\0"+
    "\1\70\1\0\12\10\1\0\5\10\1\116\1\117\5\10"+
    "\1\120\16\10\14\0\1\10\5\0\2\10\12\0\1\70"+
    "\1\0\12\10\1\0\10\10\1\121\6\10\1\122\13\10"+
    "\14\0\1\10\5\0\2\10\12\0\1\70\1\0\12\10"+
    "\1\0\5\10\1\123\7\10\1\124\15\10\14\0\1\10"+
    "\5\0\2\10\12\0\1\70\1\0\12\10\1\0\11\10"+
    "\1\125\7\10\1\126\11\10\14\0\1\10\5\0\2\10"+
    "\12\0\1\70\1\0\12\10\1\0\17\10\1\127\13\10"+
    "\14\0\1\10\5\0\2\10\12\0\1\70\1\0\12\10"+
    "\1\0\10\10\1\123\22\10\14\0\1\10\5\0\2\10"+
    "\12\0\1\70\1\0\11\10\1\130\1\0\21\10\1\124"+
    "\11\10\14\0\1\10\5\0\2\10\12\0\1\70\1\0"+
    "\12\10\1\0\13\10\1\131\17\10\14\0\1\10\5\0"+
    "\2\10\12\0\1\70\1\0\12\10\1\0\11\10\1\132"+
    "\2\10\1\133\16\10\14\0\1\10\5\0\2\10\12\0"+
    "\1\70\1\0\11\10\1\134\1\0\10\10\1\135\22\10"+
    "\14\0\1\10\5\0\2\10\12\0\1\70\1\0\12\10"+
    "\1\0\21\10\1\136\11\10\14\0\1\10\1\63\2\0"+
    "\32\63\1\0\33\63\1\0\14\63\2\0\1\65\103\0"+
    "\2\137\1\0\20\137\1\140\4\137\2\140\1\141\53\137"+
    "\25\0\1\142\5\0\1\143\75\0\2\72\3\0\3\72"+
    "\1\101\1\102\2\0\1\102\13\0\1\101\41\0\1\72"+
    "\13\0\1\73\1\74\1\75\2\0\1\77\1\100\1\77"+
    "\1\101\1\102\2\0\1\102\12\0\1\75\1\101\41\0"+
    "\1\72\13\0\2\74\3\0\3\74\1\101\1\102\2\0"+
    "\1\102\13\0\1\101\55\0\1\144\1\145\2\0\6\145"+
    "\1\0\2\145\7\0\1\145\3\0\1\145\2\0\1\145"+
    "\2\0\1\145\1\0\2\145\30\0\1\72\13\0\1\146"+
    "\1\74\1\75\2\0\3\146\1\101\1\102\2\0\1\102"+
    "\12\0\1\75\1\101\41\0\1\72\13\0\1\77\1\74"+
    "\1\75\2\0\3\77\1\101\1\102\2\0\1\102\12\0"+
    "\1\75\1\101\137\0\1\75\10\0\1\147\12\0\2\150"+
    "\3\0\3\150\60\0\2\10\12\0\1\70\1\0\12\10"+
    "\1\0\6\10\1\151\14\10\1\152\7\10\14\0\1\10"+
    "\5\0\2\10\12\0\1\70\1\0\12\10\1\0\6\10"+
    "\1\153\24\10\14\0\1\10\5\0\2\10\12\0\1\70"+
    "\1\0\12\10\1\0\2\10\1\154\30\10\14\0\1\10"+
    "\5\0\2\10\12\0\1\70\1\0\12\10\1\0\20\10"+
    "\1\123\12\10\14\0\1\10\5\0\2\10\12\0\1\70"+
    "\1\0\12\10\1\0\31\10\1\111\1\10\14\0\1\10"+
    "\5\0\2\10\12\0\1\70\1\0\12\10\1\0\14\10"+
    "\1\123\16\10\14\0\1\10\5\0\2\10\12\0\1\70"+
    "\1\0\12\10\1\0\12\10\1\123\20\10\14\0\1\10"+
    "\5\0\2\10\12\0\1\70\1\0\12\10\1\0\14\10"+
    "\1\155\16\10\14\0\1\10\5\0\2\10\12\0\1\70"+
    "\1\0\12\10\1\0\22\10\1\156\10\10\14\0\1\10"+
    "\5\0\2\10\12\0\1\70\1\0\12\10\1\0\12\10"+
    "\1\157\1\10\1\160\6\10\1\161\7\10\14\0\1\10"+
    "\5\0\2\10\12\0\1\70\1\0\12\10\1\0\6\10"+
    "\1\162\3\10\1\163\10\10\1\164\7\10\14\0\1\10"+
    "\5\0\2\10\12\0\1\70\1\0\12\10\1\0\23\10"+
    "\1\123\7\10\14\0\1\10\5\0\2\10\12\0\1\70"+
    "\1\0\12\10\1\0\6\10\1\165\24\10\14\0\1\10"+
    "\5\0\2\10\12\0\1\70\1\0\12\10\1\0\13\10"+
    "\1\166\17\10\14\0\1\10\5\0\2\10\12\0\1\70"+
    "\1\0\12\10\1\0\7\10\1\167\23\10\14\0\1\10"+
    "\5\0\2\10\12\0\1\70\1\0\11\10\1\170\1\0"+
    "\33\10\14\0\1\10\5\0\2\10\12\0\1\70\1\0"+
    "\12\10\1\0\14\10\1\171\16\10\14\0\1\10\5\0"+
    "\2\10\12\0\1\70\1\0\12\10\1\0\10\10\1\124"+
    "\22\10\14\0\1\10\5\0\2\10\12\0\1\70\1\0"+
    "\11\10\1\170\1\0\13\10\1\172\17\10\14\0\1\10"+
    "\5\0\2\10\12\0\1\70\1\0\12\10\1\0\15\10"+
    "\1\173\15\10\14\0\1\10\5\0\2\10\12\0\1\70"+
    "\1\0\11\10\1\174\1\0\33\10\14\0\1\10\5\0"+
    "\2\10\12\0\1\70\1\0\12\10\1\0\6\10\1\175"+
    "\24\10\14\0\1\10\5\0\2\10\12\0\1\70\1\0"+
    "\12\10\1\0\11\10\1\176\21\10\14\0\1\10\5\0"+
    "\2\10\12\0\1\70\1\0\12\10\1\0\32\10\1\177"+
    "\14\0\1\10\5\0\2\10\12\0\1\70\1\0\11\10"+
    "\1\200\1\0\33\10\14\0\1\10\5\0\2\10\12\0"+
    "\1\70\1\0\12\10\1\0\23\10\1\201\7\10\14\0"+
    "\1\10\23\0\1\141\4\0\3\141\76\0\1\65\4\0"+
    "\3\65\114\0\1\202\105\0\1\203\67\0\1\144\1\145"+
    "\1\75\1\0\6\145\1\0\2\145\7\0\1\145\2\0"+
    "\1\75\1\145\2\0\1\145\2\0\1\145\1\0\2\145"+
    "\44\0\2\204\1\75\1\0\6\204\1\0\2\204\7\0"+
    "\1\204\2\0\1\75\1\204\2\0\1\204\2\0\1\204"+
    "\1\0\2\204\30\0\1\72\13\0\1\205\1\74\1\75"+
    "\2\0\3\205\1\101\1\102\2\0\1\102\12\0\1\75"+
    "\1\101\55\0\2\150\3\0\3\150\76\0\2\150\3\0"+
    "\3\150\1\101\17\0\1\101\37\0\2\10\12\0\1\70"+
    "\1\0\12\10\1\0\7\10\1\206\23\10\14\0\1\10"+
    "\5\0\2\10\12\0\1\70\1\0\11\10\1\123\1\0"+
    "\13\10\1\155\17\10\14\0\1\10\5\0\2\10\12\0"+
    "\1\70\1\0\12\10\1\0\3\10\1\207\27\10\14\0"+
    "\1\10\5\0\2\10\12\0\1\70\1\0\12\10\1\0"+
    "\15\10\1\123\15\10\14\0\1\10\5\0\2\10\12\0"+
    "\1\70\1\0\11\10\1\41\1\0\33\10\14\0\1\10"+
    "\5\0\2\10\12\0\1\70\1\0\12\10\1\0\13\10"+
    "\1\210\17\10\14\0\1\10\5\0\2\10\12\0\1\70"+
    "\1\0\11\10\1\211\1\0\33\10\14\0\1\10\5\0"+
    "\2\10\12\0\1\70\1\0\11\10\1\155\1\0\33\10"+
    "\14\0\1\10\5\0\2\10\12\0\1\70\1\0\12\10"+
    "\1\0\25\10\1\121\5\10\14\0\1\10\5\0\2\10"+
    "\12\0\1\70\1\0\12\10\1\0\7\10\1\212\1\213"+
    "\22\10\14\0\1\10\5\0\2\10\12\0\1\70\1\0"+
    "\12\10\1\0\21\10\1\123\11\10\14\0\1\10\5\0"+
    "\2\10\12\0\1\70\1\0\11\10\1\214\1\0\33\10"+
    "\14\0\1\10\5\0\2\10\12\0\1\70\1\0\12\10"+
    "\1\0\11\10\1\215\21\10\14\0\1\10\5\0\2\10"+
    "\12\0\1\70\1\0\11\10\1\123\1\0\33\10\14\0"+
    "\1\10\5\0\2\10\12\0\1\70\1\0\12\10\1\0"+
    "\5\10\1\123\25\10\14\0\1\10\5\0\2\10\12\0"+
    "\1\70\1\0\12\10\1\0\6\10\1\167\24\10\14\0"+
    "\1\10\5\0\2\10\12\0\1\70\1\0\12\10\1\0"+
    "\14\10\1\175\16\10\14\0\1\10\5\0\2\10\12\0"+
    "\1\70\1\0\12\10\1\0\13\10\1\216\17\10\14\0"+
    "\1\10\5\0\2\10\12\0\1\70\1\0\12\10\1\0"+
    "\14\10\1\116\16\10\14\0\1\10\5\0\2\10\12\0"+
    "\1\70\1\0\11\10\1\124\1\0\33\10\14\0\1\10"+
    "\5\0\2\10\12\0\1\70\1\0\12\10\1\0\6\10"+
    "\1\217\24\10\14\0\1\10\5\0\2\10\12\0\1\70"+
    "\1\0\12\10\1\0\13\10\1\220\17\10\14\0\1\10"+
    "\5\0\2\10\12\0\1\70\1\0\12\10\1\0\11\10"+
    "\1\221\21\10\14\0\1\10\5\0\2\10\12\0\1\70"+
    "\1\0\12\10\1\0\7\10\1\222\23\10\14\0\1\10"+
    "\42\0\1\223\70\0\1\223\103\0\2\224\1\75\1\0"+
    "\6\224\1\0\2\224\7\0\1\224\2\0\1\75\1\224"+
    "\2\0\1\224\2\0\1\224\1\0\2\224\30\0\1\72"+
    "\13\0\1\225\1\74\1\75\2\0\3\225\1\101\1\102"+
    "\2\0\1\102\12\0\1\75\1\101\37\0\2\10\12\0"+
    "\1\70\1\0\12\10\1\0\10\10\1\167\22\10\14\0"+
    "\1\10\5\0\2\10\12\0\1\70\1\0\12\10\1\0"+
    "\4\10\1\123\26\10\14\0\1\10\5\0\2\10\12\0"+
    "\1\70\1\0\12\10\1\0\14\10\1\124\16\10\14\0"+
    "\1\10\5\0\2\10\12\0\1\70\1\0\12\10\1\0"+
    "\6\10\1\215\24\10\14\0\1\10\5\0\2\10\12\0"+
    "\1\70\1\0\12\10\1\0\10\10\1\170\22\10\14\0"+
    "\1\10\5\0\2\10\12\0\1\70\1\0\12\10\1\0"+
    "\24\10\1\123\6\10\14\0\1\10\5\0\2\10\12\0"+
    "\1\70\1\0\12\10\1\0\10\10\1\111\22\10\14\0"+
    "\1\10\5\0\2\10\12\0\1\70\1\0\12\10\1\0"+
    "\6\10\1\123\24\10\14\0\1\10\5\0\2\10\12\0"+
    "\1\70\1\0\12\10\1\0\5\10\1\226\25\10\14\0"+
    "\1\10\5\0\2\10\12\0\1\70\1\0\12\10\1\0"+
    "\6\10\1\124\24\10\14\0\1\10\5\0\2\10\12\0"+
    "\1\70\1\0\12\10\1\0\5\10\1\124\25\10\14\0"+
    "\1\10\5\0\2\10\12\0\1\70\1\0\12\10\1\0"+
    "\27\10\1\123\3\10\14\0\1\10\5\0\2\10\12\0"+
    "\1\70\1\0\12\10\1\0\14\10\1\167\16\10\14\0"+
    "\1\10\37\0\1\227\71\0\2\230\1\75\1\0\6\230"+
    "\1\0\2\230\7\0\1\230\2\0\1\75\1\230\2\0"+
    "\1\230\2\0\1\230\1\0\2\230\30\0\1\72\13\0"+
    "\1\231\1\74\1\75\2\0\3\231\1\101\1\102\2\0"+
    "\1\102\12\0\1\75\1\101\37\0\2\10\12\0\1\70"+
    "\1\0\11\10\1\116\1\0\33\10\14\0\1\10\6\0"+
    "\1\232\122\0\2\233\1\75\1\0\6\233\1\0\2\233"+
    "\7\0\1\233\2\0\1\75\1\233\2\0\1\233\2\0"+
    "\1\233\1\0\2\233\30\0\1\72\13\0\1\234\1\74"+
    "\1\75\2\0\3\234\1\101\1\102\2\0\1\102\12\0"+
    "\1\75\1\101\40\0\1\235\122\0\2\236\1\75\1\0"+
    "\6\236\1\0\2\236\7\0\1\236\2\0\1\75\1\236"+
    "\2\0\1\236\2\0\1\236\1\0\2\236\30\0\1\72"+
    "\13\0\1\237\1\74\1\75\2\0\3\237\1\101\1\102"+
    "\2\0\1\102\12\0\1\75\1\101\55\0\2\240\1\75"+
    "\1\0\6\240\1\0\2\240\7\0\1\240\2\0\1\75"+
    "\1\240\2\0\1\240\2\0\1\240\1\0\2\240\30\0"+
    "\1\72\13\0\1\241\1\74\1\75\2\0\3\241\1\101"+
    "\1\102\2\0\1\102\12\0\1\75\1\101\55\0\2\242"+
    "\1\75\1\0\6\242\1\0\2\242\7\0\1\242\2\0"+
    "\1\75\1\242\2\0\1\242\2\0\1\242\1\0\2\242"+
    "\30\0\1\72\13\0\1\243\1\74\1\75\2\0\3\243"+
    "\1\101\1\102\2\0\1\102\12\0\1\75\1\101\55\0"+
    "\2\244\1\75\1\0\6\244\1\0\2\244\7\0\1\244"+
    "\2\0\1\75\1\244\2\0\1\244\2\0\1\244\1\0"+
    "\2\244\30\0\1\72\13\0\1\245\1\74\1\75\2\0"+
    "\3\245\1\101\1\102\2\0\1\102\12\0\1\75\1\101"+
    "\55\0\2\246\1\75\1\0\6\246\1\0\2\246\7\0"+
    "\1\246\2\0\1\75\1\246\2\0\1\246\2\0\1\246"+
    "\1\0\2\246\30\0\1\72\13\0\1\247\1\74\1\75"+
    "\2\0\3\247\1\101\1\102\2\0\1\102\12\0\1\75"+
    "\1\101\55\0\2\250\1\75\1\0\6\250\1\0\2\250"+
    "\7\0\1\250\2\0\1\75\1\250\2\0\1\250\2\0"+
    "\1\250\1\0\2\250\30\0\1\72\13\0\1\251\1\74"+
    "\1\75\2\0\3\251\1\101\1\102\2\0\1\102\12\0"+
    "\1\75\1\101\55\0\2\252\1\75\1\0\6\252\1\0"+
    "\2\252\7\0\1\252\2\0\1\75\1\252\2\0\1\252"+
    "\2\0\1\252\1\0\2\252\30\0\1\72\13\0\1\253"+
    "\1\74\1\75\2\0\3\253\1\101\1\102\2\0\1\102"+
    "\12\0\1\75\1\101\55\0\2\254\1\75\1\0\6\254"+
    "\1\0\2\254\7\0\1\254\2\0\1\75\1\254\2\0"+
    "\1\254\2\0\1\254\1\0\2\254\30\0\1\72\13\0"+
    "\1\255\1\74\1\75\2\0\3\255\1\101\1\102\2\0"+
    "\1\102\12\0\1\75\1\101\55\0\2\256\1\75\1\0"+
    "\6\256\1\0\2\256\7\0\1\256\2\0\1\75\1\256"+
    "\2\0\1\256\2\0\1\256\1\0\2\256\30\0\1\72"+
    "\13\0\1\257\1\74\1\75\2\0\3\257\1\101\1\102"+
    "\2\0\1\102\12\0\1\75\1\101\55\0\2\260\1\75"+
    "\1\0\6\260\1\0\2\260\7\0\1\260\2\0\1\75"+
    "\1\260\2\0\1\260\2\0\1\260\1\0\2\260\30\0"+
    "\1\72\13\0\1\261\1\74\1\75\2\0\3\261\1\101"+
    "\1\102\2\0\1\102\12\0\1\75\1\101\55\0\2\262"+
    "\1\75\1\0\6\262\1\0\2\262\7\0\1\262\2\0"+
    "\1\75\1\262\2\0\1\262\2\0\1\262\1\0\2\262"+
    "\30\0\1\72\13\0\1\263\1\74\1\75\2\0\3\263"+
    "\1\101\1\102\2\0\1\102\12\0\1\75\1\101\57\0"+
    "\1\75\24\0\1\75\42\0\1\72\13\0\1\264\1\74"+
    "\1\75\2\0\3\264\1\101\1\102\2\0\1\102\12\0"+
    "\1\75\1\101\41\0\1\72\13\0\1\265\1\74\1\75"+
    "\2\0\3\265\1\101\1\102\2\0\1\102\12\0\1\75"+
    "\1\101\41\0\1\72\13\0\1\266\1\74\1\75\2\0"+
    "\3\266\1\101\1\102\2\0\1\102\12\0\1\75\1\101"+
    "\41\0\1\72\13\0\1\267\1\74\1\75\2\0\3\267"+
    "\1\101\1\102\2\0\1\102\12\0\1\75\1\101\41\0"+
    "\1\72\13\0\2\74\1\75\2\0\3\74\1\101\1\102"+
    "\2\0\1\102\12\0\1\75\1\101\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11130];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\13\1\2\11\24\1\14\11"+
    "\2\1\1\11\1\1\2\11\1\0\3\1\1\11\1\0"+
    "\3\1\1\0\34\1\1\11\2\1\2\0\3\1\1\0"+
    "\32\1\2\0\17\1\1\0\3\1\1\0\2\1\1\0"+
    "\2\1\1\11\6\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RubyLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public RubyLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23: 
          { return new Token(TokenType.KEYWORD,yytext());
          }
        case 27: break;
        case 18: 
          { return new Token(TokenType.BACKTICK);
          }
        case 28: break;
        case 4: 
          { return new Token(TokenType.OPERATOR, yytext());
          }
        case 29: break;
        case 16: 
          { return new Token(TokenType.SEMICOLON);
          }
        case 30: break;
        case 21: 
          { yybegin(YYINITIAL); 
                                     // length also includes the trailing quote
                                     return new Token(TokenType.STRING, string.toString());
          }
        case 31: break;
        case 5: 
          { return new Token(TokenType.GLOBAL, yytext());
          }
        case 32: break;
        case 20: 
          { string.append(yytext()) ;
          }
        case 33: break;
        case 13: 
          { return new Token(TokenType.RIGHT_BRACKET);
          }
        case 34: break;
        case 11: 
          { return new Token(TokenType.RIGHT_CURLY);
          }
        case 35: break;
        case 12: 
          { return new Token(TokenType.LEFT_BRACKET);
          }
        case 36: break;
        case 26: 
          { return new Token(TokenType.TYPE);
          }
        case 37: break;
        case 25: 
          { return new Token(TokenType.KEYWORD, yytext());
          }
        case 38: break;
        case 22: 
          { return new Token(TokenType.TYPE2,yytext());
          }
        case 39: break;
        case 17: 
          { return new Token(TokenType.COLON);
          }
        case 40: break;
        case 3: 
          { return new Token(TokenType.IDENTIFIER,yytext());
          }
        case 41: break;
        case 15: 
          { return new Token(TokenType.COMMA);
          }
        case 42: break;
        case 6: 
          { return new Token(TokenType.NUMBER,yytext());
          }
        case 43: break;
        case 8: 
          { return new Token(TokenType.LEFT_PAREN);
          }
        case 44: break;
        case 10: 
          { return new Token(TokenType.LEFT_CURLY);
          }
        case 45: break;
        case 24: 
          { return new Token(TokenType.KEYWORD,  yytext());
          }
        case 46: break;
        case 9: 
          { return new Token(TokenType.RIGHT_PAREN);
          }
        case 47: break;
        case 19: 
          { string.append(yytext());
          }
        case 48: break;
        case 7: 
          { yybegin(STRING);
                                  string.setLength(0);
          }
        case 49: break;
        case 14: 
          { return new Token(TokenType.INSTANCE);
          }
        case 50: break;
        case 1: 
          { throw new Error("Illegal character <"+yytext()+">");
          }
        case 51: break;
        case 2: 
          { /* ignore */
          }
        case 52: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {     return new Token(TokenType.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
